package com.chromahub.android.ui.components

import androidx.compose.animation.core.LinearEasing
import androidx.compose.animation.core.RepeatMode
import androidx.compose.animation.core.animateFloat
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.infiniteRepeatable
import androidx.compose.animation.core.rememberInfiniteTransition
import androidx.compose.animation.core.tween
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Air
import androidx.compose.material.icons.filled.Error
import androidx.compose.material.icons.filled.LocationOn
import androidx.compose.material.icons.filled.Search
import androidx.compose.material.icons.filled.WaterDrop
import androidx.compose.material.icons.outlined.Air
import androidx.compose.material.icons.outlined.Info
import androidx.compose.material.icons.outlined.Thermostat
import androidx.compose.material.icons.outlined.WaterDrop
import androidx.compose.material.icons.outlined.WbSunny
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ElevatedCard
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FilledIconButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButtonDefaults
import androidx.compose.material3.LinearProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.drawBehind
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.geometry.Size
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.graphics.drawscope.Fill
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import coil.compose.AsyncImage
import com.chromahub.android.data.model.ForecastItem
import com.chromahub.android.data.model.WeatherResponse
import com.chromahub.android.ui.theme.CloudyBlue
import com.chromahub.android.ui.theme.RainyBlue
import com.chromahub.android.ui.theme.SunnyYellow
import kotlinx.coroutines.delay
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import kotlin.math.roundToInt

/**
 * Search bar for location search (Material 3 style)
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LocationSearchField(
    query: String,
    onQueryChange: (String) -> Unit,
    onSearch: () -> Unit,
    modifier: Modifier = Modifier
) {
    OutlinedTextField(
        value = query,
        onValueChange = onQueryChange,
        modifier = modifier.fillMaxWidth(),
        placeholder = { Text("Search for a city") },
        leadingIcon = { 
            Icon(
                imageVector = Icons.Default.Search,
                contentDescription = "Search"
            )
        },
        trailingIcon = {
            if (query.isNotEmpty()) {
                TextButton(onClick = onSearch) {
                    Text("Search")
                }
            }
        },
        singleLine = true,
        shape = MaterialTheme.shapes.medium
    )
}

/**
 * Material 3 loading indicator with message
 */
@Composable
fun MaterialLoadingIndicator(
    message: String,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier.padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        CircularProgressIndicator(
            color = MaterialTheme.colorScheme.primary,
            strokeWidth = 4.dp,
            modifier = Modifier.size(48.dp)
        )
        
        Text(
            text = message,
            style = MaterialTheme.typography.bodyMedium,
            color = MaterialTheme.colorScheme.onSurfaceVariant
        )
    }
}

/**
 * Material 3 PageHeader with gradient background
 */
@Composable
fun PageHeader(
    title: String,
    subtitle: String? = null,
    icon: ImageVector? = null,
    modifier: Modifier = Modifier
) {
    ElevatedCard(
        modifier = modifier.fillMaxWidth(),
        shape = RoundedCornerShape(bottomStart = 24.dp, bottomEnd = 24.dp),
        colors = CardDefaults.elevatedCardColors(
            containerColor = MaterialTheme.colorScheme.primaryContainer
        )
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(
                    Brush.verticalGradient(
                        colors = listOf(
                            MaterialTheme.colorScheme.primary.copy(alpha = 0.3f),
                            MaterialTheme.colorScheme.primaryContainer
                        ),
                        startY = 0f,
                        endY = 150f
                    )
                )
                .padding(24.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.fillMaxWidth()
            ) {
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = title,
                        style = MaterialTheme.typography.headlineMedium,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.onPrimaryContainer
                    )
                    
                    if (subtitle != null) {
                        Spacer(modifier = Modifier.height(4.dp))
                        Text(
                            text = subtitle,
                            style = MaterialTheme.typography.bodyLarge,
                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.8f)
                        )
                    }
                }
                
                if (icon != null) {
                    Surface(
                        shape = CircleShape,
                        color = MaterialTheme.colorScheme.primary.copy(alpha = 0.2f),
                        modifier = Modifier.size(56.dp)
                    ) {
                        Box(contentAlignment = Alignment.Center) {
                            Icon(
                                imageVector = icon,
                                contentDescription = null,
                                tint = MaterialTheme.colorScheme.onPrimaryContainer,
                                modifier = Modifier.size(32.dp)
                            )
                        }
                    }
                }
            }
        }
    }
}

/**
 * Material 3 InfoCard with subtle bottom gradient
 */
@Composable
fun InfoCard(
    title: String,
    content: String,
    icon: ImageVector = Icons.Outlined.Info,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceVariant
        ),
        shape = MaterialTheme.shapes.medium
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .drawBehind {
                    // Draw a subtle line at the bottom
                    val strokeWidth = 4.dp.toPx()
                    val y = size.height - strokeWidth / 2
                    
                    drawLine(
                        color = MaterialTheme.colorScheme.primary.copy(alpha = 0.5f),
                        start = Offset(0f, y),
                        end = Offset(size.width, y),
                        strokeWidth = strokeWidth
                    )
                }
                .padding(16.dp)
        ) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                Icon(
                    imageVector = icon,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.size(24.dp)
                )
                
                Spacer(modifier = Modifier.width(16.dp))
                
                Column {
                    Text(
                        text = title,
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.SemiBold,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    
                    Spacer(modifier = Modifier.height(4.dp))
                    
                    Text(
                        text = content,
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.8f)
                    )
                }
            }
        }
    }
}

/**
 * Material 3 animated progress indicator
 */
@Composable
fun AnimatedProgressBar(
    progress: Float,
    modifier: Modifier = Modifier,
    showLabel: Boolean = true,
    labelPrefix: String = "",
    color: Color = MaterialTheme.colorScheme.primary
) {
    val animatedProgress by animateFloatAsState(
        targetValue = progress,
        label = "progress"
    )
    
    Column(modifier = modifier) {
        LinearProgressIndicator(
            progress = { animatedProgress },
            modifier = Modifier
                .fillMaxWidth()
                .height(8.dp)
                .clip(RoundedCornerShape(4.dp)),
            color = color,
            trackColor = color.copy(alpha = 0.2f),
            strokeCap = StrokeCap.Round
        )
        
        if (showLabel) {
            Spacer(modifier = Modifier.height(4.dp))
            Text(
                text = "$labelPrefix${(animatedProgress * 100).toInt()}%",
                style = MaterialTheme.typography.labelMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

/**
 * Weather dashboard widget for displaying current conditions (Material 3 style)
 */
@Composable
fun WeatherDashboardWidget(
    weatherResponse: WeatherResponse,
    isMetric: Boolean,
    modifier: Modifier = Modifier,
    onRefresh: () -> Unit = {}
) {
    val temperature = weatherResponse.main.temp.roundToInt()
    val location = "${weatherResponse.name}, ${weatherResponse.sys.country}"
    val description = weatherResponse.weather.firstOrNull()?.description?.let {
        it.replaceFirstChar { c -> if (c.isLowerCase()) c.titlecase(Locale.getDefault()) else c.toString() }
    } ?: ""
    
    val weatherMain = weatherResponse.weather.firstOrNull()?.main?.lowercase() ?: ""
    val isDaytime = weatherResponse.dt > weatherResponse.sys.sunrise && 
                   weatherResponse.dt < weatherResponse.sys.sunset
    
    // Pick appropriate background colors based on weather condition
    val isClearDay = weatherMain.contains("clear") && isDaytime
    val isCloudy = weatherMain.contains("cloud") 
    val isRainy = weatherMain.contains("rain") || weatherMain.contains("drizzle") || weatherMain.contains("thunderstorm")
    
    // Set colors based on conditions
    val topColor = when {
        isClearDay -> SunnyYellow.copy(alpha = 0.4f)
        isCloudy -> CloudyBlue.copy(alpha = 0.3f)
        isRainy -> RainyBlue.copy(alpha = 0.3f)
        else -> MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f)
    }
    
    val bottomColor = when {
        isClearDay -> SunnyYellow.copy(alpha = 0.1f)
        isCloudy -> CloudyBlue.copy(alpha = 0.1f)
        isRainy -> RainyBlue.copy(alpha = 0.1f)
        else -> MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.1f)
    }
    
    ElevatedCard(
        modifier = modifier
            .fillMaxWidth()
            .shadow(
                elevation = 8.dp,
                shape = RoundedCornerShape(24.dp),
                spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.2f),
                ambientColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f)
            ),
        colors = CardDefaults.elevatedCardColors(
            containerColor = MaterialTheme.colorScheme.surface
        ),
        shape = RoundedCornerShape(24.dp)
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(
                    Brush.verticalGradient(
                        colors = listOf(topColor, bottomColor),
                        startY = 0f,
                        endY = 400f
                    )
                )
                .padding(24.dp)
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // Location with icon
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.LocationOn,
                        contentDescription = null,
                        tint = MaterialTheme.colorScheme.primary,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Text(
                        text = location,
                        style = MaterialTheme.typography.titleMedium,
                        color = MaterialTheme.colorScheme.onSurface
                    )
                }
                
                Spacer(modifier = Modifier.height(16.dp))
                
                // Weather icon with animation
                val iconCode = weatherResponse.weather.firstOrNull()?.icon ?: "01d"
                AnimatedWeatherIcon(iconCode, description)
                
                Spacer(modifier = Modifier.height(16.dp))
                
                // Temperature with animated feels like
                Row(
                    verticalAlignment = Alignment.Bottom,
                    horizontalArrangement = Arrangement.Center
                ) {
                    Text(
                        text = "$temperature",
                        style = MaterialTheme.typography.displayLarge,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.onSurface
                    )
                    
                    Text(
                        text = if (isMetric) "°C" else "°F",
                        style = MaterialTheme.typography.displaySmall,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.onSurface,
                        modifier = Modifier.padding(bottom = 8.dp)
                    )
                }
                
                // Weather description
                Text(
                    text = description,
                    style = MaterialTheme.typography.titleLarge,
                    color = MaterialTheme.colorScheme.onSurface,
                    textAlign = TextAlign.Center
                )
                
                Spacer(modifier = Modifier.height(24.dp))
                
                // Weather details row
                WeatherDetailsRow(weatherResponse, isMetric)
            }
        }
    }
}

/**
 * Animated weather icon component
 */
@Composable
fun AnimatedWeatherIcon(iconCode: String, description: String) {
    Box(
        modifier = Modifier
            .size(120.dp)
            .clip(CircleShape)
            .background(MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.2f)),
        contentAlignment = Alignment.Center
    ) {
        // Create a pulsing animation
        val pulsingAlpha = remember { mutableStateOf(1f) }
        val alphaAnimation by animateFloatAsState(
            targetValue = pulsingAlpha.value,
            label = "pulseAlpha"
        )
        
        LaunchedEffect(key1 = true) {
            while (true) {
                pulsingAlpha.value = 0.6f
                delay(1500)
                pulsingAlpha.value = 1.0f
                delay(1500)
            }
        }
        
        Box(modifier = Modifier.alpha(alphaAnimation)) {
            AsyncImage(
                model = "https://openweathermap.org/img/wn/$iconCode@4x.png",
                contentDescription = description,
                modifier = Modifier.size(100.dp),
                contentScale = ContentScale.Fit
            )
        }
    }
}

/**
 * Row of weather details like wind, humidity, etc.
 */
@Composable
fun WeatherDetailsRow(
    weatherResponse: WeatherResponse,
    isMetric: Boolean,
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceEvenly
    ) {
        // Wind speed
        val windSpeed = if (isMetric) 
            "${weatherResponse.wind.speed.roundToInt()} m/s" 
        else 
            "${(weatherResponse.wind.speed * 2.237).roundToInt()} mph"
            
        WeatherDetailItem(
            icon = Icons.Filled.Air,
            value = windSpeed,
            label = "Wind"
        )
        
        // Humidity
        WeatherDetailItem(
            icon = Icons.Filled.WaterDrop,
            value = "${weatherResponse.main.humidity}%",
            label = "Humidity"
        )
        
        // Feels like temperature
        val feelsLike = if (isMetric) 
            "${weatherResponse.main.feelsLike.roundToInt()}°C" 
        else 
            "${weatherResponse.main.feelsLike.roundToInt()}°F"
            
        WeatherDetailItem(
            icon = Icons.Outlined.Thermostat,
            value = feelsLike,
            label = "Feels like"
        )
    }
}

/**
 * Individual weather detail item with icon, value and label
 */
@Composable
fun WeatherDetailItem(
    icon: ImageVector,
    value: String,
    label: String,
    modifier: Modifier = Modifier
) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        modifier = modifier.padding(8.dp)
    ) {
        Box(
            modifier = Modifier
                .size(40.dp)
                .clip(CircleShape)
                .background(MaterialTheme.colorScheme.primaryContainer),
            contentAlignment = Alignment.Center
        ) {
            Icon(
                imageVector = icon,
                contentDescription = null,
                tint = MaterialTheme.colorScheme.onPrimaryContainer,
                modifier = Modifier.size(20.dp)
            )
        }
        
        Spacer(modifier = Modifier.height(4.dp))
        
        Text(
            text = value,
            style = MaterialTheme.typography.bodyLarge,
            fontWeight = FontWeight.SemiBold
        )
        
        Text(
            text = label,
            style = MaterialTheme.typography.bodySmall,
            color = MaterialTheme.colorScheme.onSurfaceVariant
        )
    }
}

/**
 * Humidity insights card with visualization
 */
@Composable
fun HumidityInsightsCard(
    humidity: Int,
    modifier: Modifier = Modifier
) {
    val humidityProgress = humidity / 100f
    val humidityColor = when {
        humidity < 30 -> MaterialTheme.colorScheme.error
        humidity < 70 -> MaterialTheme.colorScheme.primary
        else -> MaterialTheme.colorScheme.tertiary
    }
    
    val humidityText = when {
        humidity < 30 -> "Low humidity can cause dry skin and respiratory issues."
        humidity < 70 -> "Comfortable humidity levels for most people."
        else -> "High humidity can feel uncomfortable and muggy."
    }
    
    Card(
        modifier = modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        ),
        shape = MaterialTheme.shapes.medium
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            // Title with icon
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                FilledIconButton(
                    onClick = { /* no-op */ },
                    colors = IconButtonDefaults.filledIconButtonColors(
                        containerColor = humidityColor.copy(alpha = 0.1f),
                        contentColor = humidityColor
                    ),
                    modifier = Modifier.size(40.dp)
                ) {
                    Icon(
                        imageVector = Icons.Default.WaterDrop,
                        contentDescription = null,
                        modifier = Modifier.size(20.dp)
                    )
                }
                
                Spacer(modifier = Modifier.width(12.dp))
                
                Text(
                    text = "Humidity",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.SemiBold
                )
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Humidity visualization
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(120.dp)
                    .clip(MaterialTheme.shapes.medium)
                    .background(MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f))
            ) {
                Canvas(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(120.dp)
                        .padding(16.dp)
                ) {
                    // Main drop outline
                    drawOval(
                        color = humidityColor.copy(alpha = 0.3f),
                        topLeft = Offset(size.width * 0.25f, 0f),
                        size = Size(size.width * 0.5f, size.height),
                        style = Stroke(width = 4.dp.toPx())
                    )
                    
                    // Fill based on humidity level (bottom to top)
                    val fillHeight = size.height * humidityProgress
                    val topOffset = size.height - fillHeight
                    
                    if (fillHeight > 0) {
                        drawOval(
                            brush = Brush.verticalGradient(
                                colors = listOf(
                                    humidityColor.copy(alpha = 0.8f),
                                    humidityColor.copy(alpha = 0.4f)
                                ),
                                startY = topOffset + fillHeight,
                                endY = topOffset
                            ),
                            topLeft = Offset(size.width * 0.25f, topOffset),
                            size = Size(size.width * 0.5f, fillHeight),
                            style = Fill
                        )
                    }
                }
                
                // Percentage text
                Text(
                    text = "$humidity%",
                    style = MaterialTheme.typography.headlineMedium,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    modifier = Modifier.align(Alignment.Center)
                )
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Info text
            Text(
                text = humidityText,
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

/**
 * Card showing a single forecast item (Material 3 style)
 */
@Composable
fun ForecastItemCard(
    forecastItem: ForecastItem,
    modifier: Modifier = Modifier,
    isMetric: Boolean = true
) {
    val dateFormat = SimpleDateFormat("E, HH:mm", Locale.getDefault())
    val date = Date(forecastItem.dt * 1000)
    val formattedDate = dateFormat.format(date)
    
    val weather = forecastItem.weather.firstOrNull()
    val iconUrl = "https://openweathermap.org/img/wn/${weather?.icon ?: "01d"}@2x.png"
    val description = weather?.description?.let {
        it.replaceFirstChar { c -> if (c.isLowerCase()) c.titlecase(Locale.getDefault()) else c.toString() }
    } ?: "Unknown"
    
    val tempUnit = if (isMetric) "°C" else "°F"
    
    Card(
        modifier = modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 8.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceVariant
        ),
        shape = MaterialTheme.shapes.medium
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Time
            Text(
                text = formattedDate,
                style = MaterialTheme.typography.bodyMedium,
                fontWeight = FontWeight.Medium
            )
            
            // Weather icon and description
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                AsyncImage(
                    model = iconUrl,
                    contentDescription = description,
                    modifier = Modifier.size(40.dp)
                )
                
                Text(
                    text = description,
                    style = MaterialTheme.typography.bodyMedium,
                    modifier = Modifier.padding(start = 4.dp)
                )
            }
            
            // Temperature
            Text(
                text = "${forecastItem.main.temp.roundToInt()}$tempUnit",
                style = MaterialTheme.typography.bodyLarge,
                fontWeight = FontWeight.Bold
            )
        }
    }
}

/**
 * Error state display with retry button (Material 3 style)
 */
@Composable
fun WeatherErrorState(
    message: String,
    onRetry: () -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier
            .fillMaxWidth()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Surface(
            shape = CircleShape,
            color = MaterialTheme.colorScheme.errorContainer,
            modifier = Modifier.size(64.dp)
        ) {
            Box(
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    imageVector = Icons.Default.Error,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.error,
                    modifier = Modifier.size(32.dp)
                )
            }
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        Text(
            text = message,
            style = MaterialTheme.typography.bodyLarge,
            color = MaterialTheme.colorScheme.onSurface,
            textAlign = TextAlign.Center
        )
        
        Spacer(modifier = Modifier.height(16.dp))
        
        OutlinedButton(onClick = onRetry) {
            Text("Retry")
        }
    }
}

/**
 * Loading state display (Material 3 style)
 */
@Composable
fun WeatherLoadingState(
    modifier: Modifier = Modifier,
    message: String = "Loading weather data..."
) {
    Box(
        modifier = modifier,
        contentAlignment = Alignment.Center
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            CircularProgressIndicator(
                color = MaterialTheme.colorScheme.primary,
                strokeWidth = 4.dp,
                modifier = Modifier.size(48.dp)
            )
            
            Text(
                text = message,
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}